ylab="Num. muertes", xlab="Date")
lines(data_valencia$fecha, pred3, lwd=2, col="green")
# autocorrelacion residual
res3 <- residuals(model3, type="response")
acf(res3, lag=30)
# funcion periodica Fourier anual
fourier1 <- harmonic(data_valencia$fecha,nfreq=1,period=365.25)
# modelo
model3 <- glm(tm ~ trend + fourier1 , data=data_valencia, family=quasipoisson)
summary(model3)
# prediccion
pred3 <- predict(model3, type="response")
plot(data_valencia$fecha, data_valencia$tm, pch=19, cex=0.2, col=grey(0.6),
ylab="Num. muertes", xlab="Date")
lines(data_valencia$fecha, pred3, lwd=2, col="dkgreen")
# funcion periodica Fourier anual
fourier1 <- harmonic(data_valencia$fecha,nfreq=1,period=365.25)
# modelo
model3 <- glm(tm ~ trend + fourier1 , data=data_valencia, family=quasipoisson)
summary(model3)
# prediccion
pred3 <- predict(model3, type="response")
plot(data_valencia$fecha, data_valencia$tm, pch=19, cex=0.2, col=grey(0.6),
ylab="Num. muertes", xlab="Date")
lines(data_valencia$fecha, pred3, lwd=2, col="seagreen")
# autocorrelacion residual
res3 <- residuals(model3, type="response")
acf(res3, lag=30)
# funcion flexible 1 df/ano
spl <- ns(data_valencia$trend,df=12)
# modelo
model7 <- glm(tm ~ spl , data=data_valencia, family=quasipoisson)
summary(model7)
# prediccion
pred7 <- predict(model7, type="response")
plot(data_valencia$fecha, data_valencia$tm, pch=19, cex=0.2, col=grey(0.6),
ylab="Num. muertes", xlab="Date")
lines(data_valencia$fecha, pred7, lwd=2, col="red")
# autocorrelacion residual
res7<- residuals(model7, type="response")
acf(res7, lag=30)
plot(data_valencia$fecha, data_valencia$tm, pch=19, cex=0.2, col=grey(0.6),
ylab="Num. muertes", xlab="Date")
lines(data_valencia$fecha, pred2, lwd=2, col="blue")
lines(data_valencia$fecha, pred6, lwd=2, col="seagreen")
lines(data_valencia$fecha, pred10, lwd=2, col="red")
QAICM(model7)
QAICM(model8)
QAICM(model9)
QAICM(model10)
phi <- summary(model)$dispersion
phi <- summary(model)$dispersion
phi
model1
phi
summary(model1)$dispersion
QAICm <- deviance(model1) + 2*summary(model1)$df[3]*phi
QAICm
type
model1$type
# modelo
model0 <- glm(tm ~ 1, data=data_valencia, family=quasipoisson)
summary(model0)
# autocorrelacion
acf(data_valencia$tm, lag=30)
AICQM(model0)
AIQCM(model0)
# librerias manejo de datos
library(tidyverse)
library(lubridate)
library(fs)
library(tsibble)
library(feasts)
# librerias series temporales
library(tsModel)
library(splines)
# funcion para AIC con quasipoisson
QAICM <- function(model,type="logLik") {
QAICm <- vector("list",0)
if(!model$family$family%in%c("poisson","quasipoisson")) {
stop("only for poisson/quasipoisson family")
}
phi <- summary(model)$dispersion
if(type=="dev") {
QAICm <- deviance(model) + 2*summary(model)$df[3]*phi
} else {
loglik <- sum(dpois( model$y, model$fitted.values, log=TRUE))
QAICm <- -2*loglik + 2*(summary(model)$n-summary(model)$residual.df)*phi
}
return(QAICm)
}
QAICM(model0)
# librerias manejo de datos
library(tidyverse)
library(lubridate)
library(fs)
library(tsibble)
library(feasts)
# librerias series temporales
library(tsModel)
library(splines)
# funcion para AIC con quasipoisson
QAICM <- function(model,type="logLik") {
QAICm <- vector("list",0)
if(!model$family$family%in%c("poisson","quasipoisson")) {
stop("only for poisson/quasipoisson family")
}
phi <- summary(model)$dispersion
if(type=="dev") {
QAICm <- deviance(model) + 2*summary(model)$df[3]*phi
} else {
loglik <- sum(dpois( model$y, model$fitted.values, log=TRUE))
QAICm <- -2*loglik + 2*(summary(model)$n-summary(model)$residual.df)*phi
}
return(QAICm)
}
QAICM(model0)
# librerias manejo de datos
library(tidyverse)
library(lubridate)
library(fs)
library(tsibble)
library(feasts)
# librerias series temporales
library(tsModel)
library(splines)
# funcion para AIC con quasipoisson
QAICM <- function(model,type="logLik") {
if(!model$family$family%in%c("poisson","quasipoisson")) {
stop("only for poisson/quasipoisson family")
}
phi <- summary(model)$dispersion
if(type=="dev") {
QAICm <- deviance(model) + 2*summary(model)$df[3]*phi
} else {
loglik <- sum(dpois( model$y, model$fitted.values, log=TRUE))
QAICm <- -2*loglik + 2*(summary(model)$n-summary(model)$residual.df)*phi
}
return(QAICm)
}
return(QAICm, "dev")
QAIC(model0, "dev")
QAIC(model0, type="dev")
QAICM(model0, "dev")
QAICM(model3, "dev")
QAICM(model4, "dev")
QAICM(model5, "dev")
QAICM(model6, "dev")
QAICM(model7, "dev")
QAICM(model8, "dev")
QAICM(model9, "dev")
QAICM(model10, "dev")
QAICM(model2)
QAICM(model3)
QAICM(model10)
QAICM(model2, "dev")
QAICM(model3, "dev")
QAICM(model10, "dev")
spl <- ns(data_valencia$trend, df=120)
# modelo
model11 <- glm(tm ~ spl , data=data_valencia, family=quasipoisson)
QAICM(model11, "dev")
?onebasis
btmean <- onebasis(data_valencia$tmean, df=1)
model.temp1 <- glm(tm ~ spl , data=data_valencia, family=quasipoisson)
min.tmean <- min(data_valencia$tmean)
pred <- crosspred(b, model.tmean1, cen=min.tmean)
btmean <- onebasis(data_valencia$tmean, df=1)
model.teman1 <- glm(tm ~ spl , data=data_valencia, family=quasipoisson)
min.tmean <- min(data_valencia$tmean)
pred <- crosspred(b, model.tmean1, cen=min.tmean)
btmean <- onebasis(data_valencia$tmean, df=1)
model.teman1 <- glm(tm ~ spl , data=data_valencia, family=quasipoisson)
min.tmean <- min(data_valencia$tmean)
pred <- crosspred(btmean, model.tmean1, cen=min.tmean)
btmean <- onebasis(data_valencia$tmean, df=1)
model.tmean1 <- glm(tm ~ spl , data=data_valencia, family=quasipoisson)
min.tmean <- min(data_valencia$tmean)
pred <- crosspred(btmean, model.tmean1, cen=min.tmean)
min.tmean <- min(data_valencia$tmean)
min.tmean
btmean <- onebasis(data_valencia$tmean, df=1)
model.tmean1 <- glm(tm ~ spl , data=data_valencia, family=quasipoisson)
min.tmean <- min(data_valencia$tmean)
pred <- crosspred(btmean, model.tmean1, cen=3)
btmean <- onebasis(data_valencia$tmean, df=1)
model.tmean1 <- glm(tm ~ spl , data=data_valencia, family=quasipoisson)
min.tmean <- min(data_valencia$tmean)
pred <- crosspred(btmean, model.tmean1, by=1, cen=3)
btmean <- onebasis(data_valencia$tmean, df=1)
model.tmean1 <- glm(tm ~ spl + btmean, data=data_valencia, family=quasipoisson)
min.tmean <- min(data_valencia$tmean)
pred <- crosspred(btmean, model.tmean1, by=1, cen=3)
plot(pred, xlab="Temperatura (ºC)", ylab="Riesgo de mortalidad")
btmean <- onebasis(data_valencia$tmean, df=1)
model.tmean1 <- glm(tm ~ spl + btmean, data=data_valencia, family=quasipoisson)
min.tmean <- min(data_valencia$tmean)
pred <- crosspred(btmean, by=1, cen=min.tmean)
btmean <- onebasis(data_valencia$tmean, df=1)
model.tmean1 <- glm(tm ~ spl + btmean, data=data_valencia, family=quasipoisson)
min.tmean <- min(data_valencia$tmean)
pred <- crosspred(btmean, model.tmean1, cen=min.tmean)
plot(pred, xlab="Temperatura (ºC)", ylab="Riesgo de mortalidad")
btmean <- onebasis(data_valencia$tmean, df=2)
model.tmean2 <- glm(tm ~ spl + btmean, data=data_valencia, family=quasipoisson)
pred <- crosspred(btmean, model.tmean2, cen=min.tmean)
plot(pred, xlab="Temperatura (ºC)", ylab="Riesgo de mortalidad")
btmean <- onebasis(data_valencia$tmean, df=1)
model.tmean1 <- glm(tm ~ spl + btmean, data=data_valencia, family=quasipoisson)
min.tmean <- min(data_valencia$tmean)
pred <- crosspred(btmean, model.tmean1, cen=min.tmean)
plot(pred, xlab="Temperatura (ºC)", ylab="Riesgo de mortalidad", ylim(0.9,1.5))
btmean <- onebasis(data_valencia$tmean, df=1)
model.tmean1 <- glm(tm ~ spl + btmean, data=data_valencia, family=quasipoisson)
min.tmean <- min(data_valencia$tmean)
pred <- crosspred(btmean, model.tmean1, cen=min.tmean)
plot(pred, xlab="Temperatura (ºC)", ylab="Riesgo de mortalidad", ylim(1,1.5))
btmean <- onebasis(data_valencia$tmean, df=1)
model.tmean1 <- glm(tm ~ spl + btmean, data=data_valencia, family=quasipoisson)
min.tmean <- min(data_valencia$tmean)
pred <- crosspred(btmean, model.tmean1, cen=min.tmean)
plot(pred, xlab="Temperatura (ºC)", ylab="Riesgo de mortalidad")
# Ajuste lienal de temperatura
btmean <- onebasis(data_valencia$tmean, df=1)
model.tmean1 <- glm(tm ~ spl + btmean, data=data_valencia, family=quasipoisson)
min.tmean <- min(data_valencia$tmean)
pred1 <- crosspred(btmean, model.tmean1, cen=min.tmean)
plot(pred1, xlab="Temperatura (ºC)", ylab="Riesgo de mortalidad")
# Ajuste no-lienal de temperatura con df=2
btmean <- onebasis(data_valencia$tmean, df=2)
model.tmean2 <- glm(tm ~ spl + btmean, data=data_valencia, family=quasipoisson)
pred2 <- crosspred(btmean, model.tmean2, cen=min.tmean)
plot(pred2, xlab="Temperatura (ºC)", ylab="Riesgo de mortalidad")
# Ajuste no-lienal de temperatura con df=3
btmean <- onebasis(data_valencia$tmean, df=3)
model.tmean3 <- glm(tm ~ spl + btmean, data=data_valencia, family=quasipoisson)
pred3 <- crosspred(btmean, model.tmean3, cen=min.tmean)
plot(pred3, xlab="Temperatura (ºC)", ylab="Riesgo de mortalidad")
# Ajuste no-lienal de temperatura con df=2
btmean2 <- onebasis(data_valencia$tmean, df=2)
model.tmean2 <- glm(tm ~ spl + btmean2, data=data_valencia, family=quasipoisson)
pred2 <- crosspred(btmean, model.tmean2, cen=min.tmean)
# Ajuste lienal de temperatura
btmean1 <- onebasis(data_valencia$tmean, df=1)
model.tmean1 <- glm(tm ~ spl + btmean1, data=data_valencia, family=quasipoisson)
min.tmean <- min(data_valencia$tmean)
pred1 <- crosspred(btmean1, model.tmean1, cen=min.tmean)
plot(pred1, xlab="Temperatura (ºC)", ylab="Riesgo de mortalidad")
# Ajuste no-lienal de temperatura con df=2
btmean2 <- onebasis(data_valencia$tmean, df=2)
model.tmean2 <- glm(tm ~ spl + btmean2, data=data_valencia, family=quasipoisson)
pred2 <- crosspred(btmean2, model.tmean2, cen=min.tmean)
plot(pred2, xlab="Temperatura (ºC)", ylab="Riesgo de mortalidad")
#   TESTED IN CONTEXTS DIFFERENT THAN THE EXAMPLE INCLUDED IN THE PAPER.
#   IT IS RESPONSIBILITY OF THE USER TO CHECK THE RELIABILITY OF THE RESULTS IN
#   DIFFERENT APPLICATIONS.
#
# Update: 18 October 2016
# AN UPDATED VERSION OF THIS FUNCTION CAN BE FOUND AT:
#   https://github.com/gasparrini/2017_tobias_Epidem_Rcodedata
#
################################################################################
#
findmin <- function(basis,model=NULL,coef=NULL,vcov=NULL,at=NULL,from=NULL,
to=NULL,by=NULL,sim=FALSE,nsim=5000) {
#
################################################################################
#   ARGUMENTS:
#   - basis: A SPLINE OR OTHER BASIS FOR AN EXPOSURE x CREATED BY DLNM FUNCTION
#            CROSSBASIS OR ONEBASIS
#   - model: THE FITTED MODEL
#   - coef AND vcov: COEF AND VCOV FOR basis IF model IS NOT PROVIDED
#
#   - at: A NUMERIC VECTOR OF x VALUES OVER WHICH THE MINIMUM IS SOUGHT
#   OR
#   - from, to: RANGE OF x VALUES OVER WHICH THE MINIMUM IS SOUGHT.
#   - by: INCREMENT OF THE SEQUENCES x VALUES OVER WHICH THE MINIMUM IS SOUGHT
#
#   - sim: IF BOOTSTRAP SIMULATION SAMPLES SHOULD BE RETURNED
#   - nsim: NUMBER OF SIMULATION SAMPLES
################################################################################
################################################################################
# CREATE THE BASIS AND EXTRACT COEF-VCOV
#
# CHECK AND DEFINE BASIS
if(!any(class(basis)%in%c("crossbasis","onebasis")))
stop("the first argument must be an object of class 'crossbasis' or 'onebasis'")
#
# INFO
one <- any(class(basis)%in%c("onebasis"))
attr <- attributes(basis)
range <- attr(basis,"range")
if(is.null(by)) by <- 0.1
lag <- if(one) c(0,0) else cb=attr(basis,"lag")
if(is.null(model)&&(is.null(coef)||is.null(vcov)))
stop("At least 'model' or 'coef'-'vcov' must be provided")
name <- deparse(substitute(basis))
cond <- if(one) paste(name,"[[:print:]]*b[0-9]{1,2}",sep="") else
paste(name,"[[:print:]]*v[0-9]{1,2}\\.l[0-9]{1,2}",sep="")
#
# SET COEF, VCOV CLASS AND LINK
if(!is.null(model)) {
model.class <- class(model)
coef <- dlnm:::getcoef(model,model.class)
ind <- grep(cond,names(coef))
coef <- coef[ind]
vcov <- dlnm:::getvcov(model,model.class)[ind,ind,drop=FALSE]
model.link <- dlnm:::getlink(model,model.class)
} else model.class <- NA
#
# CHECK
if(length(coef)!=ncol(basis) || length(coef)!=dim(vcov)[1] ||
any(is.na(coef)) || any(is.na(vcov)))
stop("model or coef/vcov not consistent with basis")
#
# DEFINE at
at <- dlnm:::mkat(at,from,to,by,range,lag,bylag=1)
predvar <- if(is.matrix(at)) rownames(at) else at
predlag <- dlnm:::seqlag(lag,by=1)
#
# CREATE THE MATRIX OF TRANSFORMED CENTRED VARIABLES (DEPENDENT ON TYPE)
type <- if(one) "one" else "cb"
Xpred <- dlnm:::mkXpred(type,basis,at,predvar,predlag,cen=NULL)
Xpredall <- 0
for(i in seq(length(predlag))) {
ind <- seq(length(predvar))+length(predvar)*(i-1)
Xpredall <- Xpredall + Xpred[ind,,drop=FALSE]
}
#
################################################################################
# FIND THE MINIMUM
#
pred <- drop(Xpredall%*%coef)
ind <- which.min(pred)
min <- predvar[ind]
#
################################################################################
# SIMULATIONS
#
if(sim) {
# SIMULATE COEFFICIENTS
k <- length(coef)
eigen <- eigen(vcov)
X <- matrix(rnorm(length(coef)*nsim),nsim)
coefsim <- coef + eigen$vectors %*% diag(sqrt(eigen$values),k) %*% t(X)
# COMPUTE MINIMUM
minsim <- apply(coefsim,2,function(coefi) {
pred <- drop(Xpredall%*%coefi)
ind <- which.min(pred)
return(predvar[ind])
})
}
#
################################################################################
#
res <- if(sim) minsim else min
#
return(res)
}
findmin(model.temp2)
findmin(model.tmean2)
findmin(btemp2, model.tmean2)
findmin(btmean2, model.tmean2)
# Ajuste lienal de temperatura
btmean1 <- onebasis(data_valencia$tmean, df=1)
model.tmean1 <- glm(tm ~ spl + btmean1, data=data_valencia, family=quasipoisson)
min1 <- min(data_valencia$tmean)
pred1 <- crosspred(btmean1, model.tmean1, cen=min1)
plot(pred1, xlab="Temperatura (ºC)", ylab="Riesgo de mortalidad")
# Ajuste no-lienal de temperatura con df=2
btmean2 <- onebasis(data_valencia$tmean, df=2)
model.tmean2 <- glm(tm ~ spl + btmean2, data=data_valencia, family=quasipoisson)
min2 <- findmin(btemp2, model.tmean2)
# Ajuste no-lienal de temperatura con df=2
btmean2 <- onebasis(data_valencia$tmean, df=2)
model.tmean2 <- glm(tm ~ spl + btmean2, data=data_valencia, family=quasipoisson)
min2 <- findmin(btmean2, model.tmean2)
pred2 <- crosspred(btmean2, model.tmean2, cen=min2)
plot(pred2, xlab="Temperatura (ºC)", ylab="Riesgo de mortalidad")
# Ajuste no-lienal de temperatura con df=3
btmean2 <- onebasis(data_valencia$tmean, df=3)
model.tmean3 <- glm(tm ~ spl + btmean3, data=data_valencia, family=quasipoisson)
# Ajuste no-lienal de temperatura con df=3
btmean2 <- onebasis(data_valencia$tmean, df=3)
model.tmean3 <- glm(tm ~ spl + btmean3, data=data_valencia, family=quasipoisson)
# Ajuste no-lienal de temperatura con df=3
btmean3 <- onebasis(data_valencia$tmean, df=3)
model.tmean3 <- glm(tm ~ spl + btmean3, data=data_valencia, family=quasipoisson)
min3 <- findmin(btmean3, model.tmean3)
pred3 <- crosspred(btmean3, model.tmean3, cen=min3)
plot(pred3, xlab="Temperatura (ºC)", ylab="Riesgo de mortalidad")
# Ajuste no-lienal de temperatura con df=4
btmean4 <- onebasis(data_valencia$tmean, df=4)
model.tmean4 <- glm(tm ~ spl + btmean4, data=data_valencia, family=quasipoisson)
min4 <- findmin(btmean4, model.tmean4)
pred4 <- crosspred(btmean4, model.tmean2, cen=min4)
# Ajuste no-lienal de temperatura con df=4
btmean4 <- onebasis(data_valencia$tmean, df=4)
model.tmean4 <- glm(tm ~ spl + btmean4, data=data_valencia, family=quasipoisson)
min4 <- findmin(btmean4, model.tmean4)
pred4 <- crosspred(btmean4, model.tmean4, cen=min4)
plot(pred4, xlab="Temperatura (ºC)", ylab="Riesgo de mortalidad")
QAICM(model.tmean1, "dev")
QAICM(model.tmean2, "dev")
QAICM(model.tmean3, "dev")
QAICM(model.tmean4, "dev")
# Ajuste no-lienal de temperatura con df=4
bozono <- onebasis(data_valencia$o38, df=1)
model.ozono <- glm(tm ~ spl + bozono, data=data_valencia, family=quasipoisson)
min <- findmin(bozono, model.ozono)
# Ajuste no-lienal de temperatura con df=4
bozono <- onebasis(data_valencia$o38, df=1)
model.ozono <- glm(tm ~ spl + bozono, data=data_valencia, family=quasipoisson)
pred <- crosspred(bozono, model.ozono, cen=10)
plot(pred, xlab="Ozono (8h)", ylab="Riesgo de mortalidad")
# Ajuste no-lienal de temperatura con df=4
bozono <- onebasis(data_valencia$o38, df=1)
model.ozono <- glm(tm ~ spl + bozono, data=data_valencia, family=quasipoisson)
min <- findmin(bozono, model.ozono)
# Ajuste no-lienal de temperatura con df=4
bozono <- onebasis(data_valencia$o38, df=2)
model.ozono <- glm(tm ~ spl + bozono, data=data_valencia, family=quasipoisson)
pred <- crosspred(bozono, model.ozono, cen=10)
plot(pred, xlab="Ozono (8h)", ylab="Riesgo de mortalidad")
# Ajuste no-lienal de temperatura con df=4
bozono <- onebasis(data_valencia$o38, df=3)
model.ozono <- glm(tm ~ spl + bozono, data=data_valencia, family=quasipoisson)
pred <- crosspred(bozono, model.ozono, cen=10)
plot(pred, xlab="Ozono (8h)", ylab="Riesgo de mortalidad")
# Ajuste lienal de temperatura con df=1
bozono <- onebasis(data_valencia$o38, df=3)
model.ozono <- glm(tm ~ spl + bozono, data=data_valencia, family=quasipoisson)
min <- min(data_valencia$o38)
pred <- crosspred(bozono, model.ozono, cen=min)
# Ajuste lienal de temperatura con df=1
bozono <- onebasis(data_valencia$o38, df=3)
model.ozono <- glm(tm ~ spl + bozono, data=data_valencia, family=quasipoisson)
min <- min(data_valencia$o38, rma.omit=TRUE)
pred <- crosspred(bozono, model.ozono, cen=min)
min
?min
# Ajuste lienal de temperatura con df=1
bozono <- onebasis(data_valencia$o38, df=3)
model.ozono <- glm(tm ~ spl + bozono, data=data_valencia, family=quasipoisson)
min <- min(data_valencia$o38, na.rm=TRUE)
pred <- crosspred(bozono, model.ozono, cen=min)
plot(pred, xlab="Ozono (8h)", ylab="Riesgo de mortalidad")
# Ajuste lienal de temperatura con df=1
bozono1 <- onebasis(data_valencia$o38, df=1)
model.ozono1 <- glm(tm ~ spl + bozono, data=data_valencia, family=quasipoisson)
min <- min(data_valencia$o38, na.rm=TRUE)
pred <- crosspred(bozono1, model.ozono1, cen=min)
# Ajuste lienal de temperatura con df=1
bozono1 <- onebasis(data_valencia$o38, df=1)
model.ozono1 <- glm(tm ~ spl + bozono1, data=data_valencia, family=quasipoisson)
min <- min(data_valencia$o38, na.rm=TRUE)
pred <- crosspred(bozono1, model.ozono1, cen=min)
plot(pred, xlab="Ozono (8h)", ylab="Riesgo de mortalidad")
# Ajuste lienal de temperatura con df=2
bozono2 <- onebasis(data_valencia$o38, df=2)
model.ozono2 <- glm(tm ~ spl + bozono, data=data_valencia, family=quasipoisson)
min <- min(data_valencia$o38, na.rm=TRUE)
pred <- crosspred(bozono2, model.ozono2, cen=min)
# Ajuste lienal de temperatura con df=2
bozono2 <- onebasis(data_valencia$o38, df=2)
model.ozono2 <- glm(tm ~ spl + bozono2, data=data_valencia, family=quasipoisson)
min <- min(data_valencia$o38, na.rm=TRUE)
pred <- crosspred(bozono2, model.ozono2, cen=min)
plot(pred, xlab="Ozono (8h)", ylab="Riesgo de mortalidad")
# Ajuste lienal de temperatura con df=3
bozono3 <- onebasis(data_valencia$o38, df=3)
model.ozono3 <- glm(tm ~ spl + bozono3, data=data_valencia, family=quasipoisson)
pred <- crosspred(bozono3, model.ozono3, cen=min)
plot(pred, xlab="Ozono (8h)", ylab="Riesgo de mortalidad")
QAICM(model.ozono1, "dev")
QAICM(model.ozono2, "dev")
QAICM(model.ozono3, "dev")
setwd("~/Dropbox/UPCXIVSC_RST/2 Martes_/Datos")
load(QAICM)
source(QAICM.R)
source(QAICM)
?source
source("QAICM.R")
# librerias manejo de datos
library(tidyverse)
library(lubridate)
library(fs)
library(tsibble)
library(feasts)
# librerias series temporales
library(tsModel)
library(splines)
library(dlnm)
# cargar funciones
source("QAICM.R")
source("findmin.R")
source("QAICM.R")
source("QAICM.R")
data_valencia <- dir_ls("Datos", regexp = "csv$") %>%
map(read.csv2) %>%
reduce(left_join, by = "fecha")
data_valencia <- dir_ls("Datos", regexp = "csv$") %>%
map(read.csv2) %>%
reduce(left_join, by = "fecha")
# importar
data_valencia <- mutate(data_valencia,
fecha = mdy(fecha)) %>%
as_tsibble(index = "fecha")
# duplicados
is_duplicated(data_valencia, index = fecha)
# lagunas
has_gaps(data_valencia)
